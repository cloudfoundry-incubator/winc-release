filter timestamp {"$(Get-Date -Format G): $_"}

$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

Write-Output "Started groot pre-start" | timestamp

$grootDriverStore = "<%= p("groot.driver_store") %>"
if(Test-Path "$grootDriverStore\volumes"){
  ls "$grootDriverStore\volumes" | foreach { c:\var\vcap\packages\groot\groot.exe --driver-store $grootDriverStore delete $_.Name }
}

$sharedEventName = "RootfsEvent"
try {
  $event = [System.Threading.EventWaitHandle]::OpenExisting($sharedEventName)
} catch {
  $mode = New-Object System.Threading.EventResetMode
  $initSignaled = $false
  $event = New-Object System.Threading.EventWaitHandle($initSignaled, $mode, $sharedEventName)
}

$refreshBaseLayer = [bool]$<%= p("groot.refresh_base_layer") %>
if ($refreshBaseLayer -and (Test-Path "$grootDriverStore\layers")) {
  Write-Output "Refreshing base layer" | timestamp

  cd "$grootDriverStore\layers"

  $largest=[long]"0";
  $largestSha="";
  Get-ChildItem | ForEach-Object { If( [long](Get-Content $_\size) -Gt $largest){ $largest=[long](Get-Content $_\size); $largestSha=$_.Name } };
  Write-Output "Base layer sha is: $largestSha" | timestamp

  Write-Output "Removing size file from base layer $largestSha" | timestamp
  Remove-Item "$largestSha/size"
  if (Test-Path "$largestSha/size") {
    Write-Output "Removing size file from base layer $largestSha failed" | timestamp

    if (!$event.Set()) {
      Write-Output "Failed to signal the $sharedEventName event" | timestamp
    }
    exit 1
  }
}

<% p("groot.cached_image_uris").each do |uri| %>
  # We used to include this as a workaround for https://github.com/Microsoft/hcsshim/issues/155,
  # but it turns out this is still required - if there are containers existing
  # when bosh does a restart, the garden server would fail to come up because there is still a
  # process using the old garden-init.exe
  Get-ComputeProcess | foreach { c:\var\vcap\packages\winc\winc.exe delete $_.Id }

  Write-Output "Begin pulling <%= uri %> image" | timestamp
  C:\var\vcap\packages\groot\groot.exe --config "C:\var\vcap\jobs\groot\config\groot.yml" --driver-store $grootDriverStore pull <%= uri %>

  if ($LASTEXITCODE -ne 0) {
    Write-Output "Failed pulling <%= uri %> image" | timestamp
    if (!$event.Set()) {
      Write-Output "Failed to signal the $sharedEventName event" | timestamp
    }
    exit $LASTEXITCODE
  }
  Write-Output "Finished pulling <%= uri %> image" | timestamp

  if (!$event.Set()) {
    Write-Output "Failed to signal the $sharedEventName event" | timestamp
    exit 1
  }
  Write-Output "$sharedEventName event successfully signaled" | timestamp
<% end %>

Write-Output "Finished groot pre-start" | timestamp
